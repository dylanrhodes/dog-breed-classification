name: "SmallNet"
layer {
  name: "small-data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
# mean pixel / channel-wise mean instead of mean image
  transform_param {
    crop_size: 128
    mean_value: 101
    mean_value: 119
    mean_value: 124
    mirror: true
  }
  data_param {
    source: "/tmp/data_db"
    batch_size: 50
    backend: LEVELDB
  }
}
layer {
  name: "small-data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
# mean pixel / channel-wise mean instead of mean image
  transform_param {
    crop_size: 128
    mean_value: 101
    mean_value: 119
    mean_value: 124
    mirror: true
  }
  data_param {
    source: "/tmp/test_db"
    batch_size: 50
    backend: LEVELDB
  }
}
layer {
  name: "small-conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "small-relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "small-pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "small-conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "small-relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "small-pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "small-fc"
  type: "InnerProduct"
  bottom: "pool2"
  top: "fc"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 133
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "small-accuracy"
  type: "Accuracy"
  bottom: "fc"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "small-loss"
  type: "SoftmaxWithLoss"
  bottom: "fc"
  bottom: "label"
  top: "loss"
}
